artifactory:
  artifactory:
    migration:
      enabled: false
    persistence:
      size: 30Gi
    replicaCount: 1
    unifiedSecretInstallation: true
    unifiedSecretPrependReleaseName: true
    worker:
      enabled: '{{ .Values.worker.enabled }}'
  database:
    driver: org.postgresql.Driver
    password: artifactory
    type: postgresql
    url: '{{ include "database.url" . }}'
    user: artifactory
  enabled: true
  installerInfo: '{"productId":"Helm_JFrogPlatform/{{ printf "11.0.4-%s" .Chart.AppVersion  }}","features":[{"featureId":"Platform/{{
    printf "%s-%s" "kubernetes" .Capabilities.KubeVersion.Version }}"},{"featureId":"Database/{{
    .Values.database.type }}"},{"featureId":"Nginx_Enabled/{{ .Values.nginx.enabled
    }}"},{"featureId":"ArtifactoryPersistence_Type/{{ .Values.artifactory.persistence.type
    }}"},{"featureId":"SplitServicesToContainers_Enabled/{{ .Values.splitServicesToContainers
    }}"},{"featureId":"Filebeat_Enabled/{{ .Values.filebeat.enabled }}"},{"featureId":"ReplicaCount/{{
    .Values.artifactory.replicaCount }}"}]}'
  mc:
    enabled: false
  postgresql:
    enabled: false
  unifiedUpgradeAllowed: true
  waitForDatabase: false
catalog:
  database:
    password: catalog
    url: '{{ include "database.url" . }}'
    user: catalog
  enabled: false
databaseUpgradeReady: true
distribution:
  database:
    password: distribution
    url: '{{ include "database.url" . }}'
    user: distribution
  distribution:
    unifiedSecretInstallation: true
  enabled: false
  postgresql:
    enabled: false
  unifiedUpgradeAllowed: true
gaUpgradeReady: false
global:
  customCertificates:
    enabled: false
  customInitContainersBegin: |
    {{ template "initdb" . }}
  customVolumes: |
    {{ template "initdb-volume" . }}
  database:
    adminPassword: postgres
    host: '{{ .Release.Name }}-postgresql'
    initContainerImagePullPolicy: IfNotPresent
    initContainerImageResources:
      limits:
        cpu: 1
        memory: 1Gi
      requests:
        cpu: 5m
        memory: 10Mi
    initContainerSetupDBImage: '{{ .Values.global.imageRegistry }}/postgres:16.6-alpine'
    initContainerSetupDBUser: null
    initDBCreation: true
    port: 5432
    secrets: {}
    sslMode: disable
  imageRegistry: releases-docker.jfrog.io
  jfrogUrl: '{{ include "jfrog-platform.jfrogUrl" . }}'
  joinKey: EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE
  masterKey: bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
  rabbitmq:
    auth:
      tls:
        autoGenerated: true
        enabled: false
  versions: {}
postgresql:
  auth:
    postgresPassword: postgres
  enablePostgresUser: true
  enabled: true
  image:
    repository: bitnami/postgresql
    tag: 16.6.0-debian-12-r2
  primary:
    extendedConfiguration: |
      max_connections = 1000
      max_wal_size = 1000MB
    persistence:
      size: 90Gi
  resources:
    limits:
      memory: 1Gi
    requests:
      cpu: 20m
      memory: 200Mi
  upgradeHookSTSDelete:
    enabled: true
    image:
      pullPolicy: IfNotPresent
      registry: '{{ .Values.global.imageRegistry }}'
      repository: bitnami/kubectl
      tag: 1.31.2
    resources:
      limits:
        cpu: 0.5
        memory: 1Gi
      requests:
        cpu: 5m
        memory: 10Mi
    serviceAccount:
      automountServiceAccountToken: true
      create: true
      name: null
      rbac:
        create: true
        role:
          rules:
          - apiGroups:
            - apps
            resources:
            - statefulsets
            verbs:
            - get
            - delete
            - list
    tolerations: []
preUpgradeHook:
  containerSecurityContext:
    enabled: false
  enabled: true
  image:
    pullPolicy: IfNotPresent
    registry: '{{ .Values.global.imageRegistry }}'
    repository: bitnami/kubectl
    tag: 1.31.2
  podSecurityContext:
    enabled: false
  resources:
    limits:
      cpu: 1
      memory: 1Gi
    requests:
      cpu: 5m
      memory: 10Mi
  tolerations: []
rabbitmq:
  auth:
    erlangCookie: secretcookie
    password: password
    tls:
      autoGenerated: true
      caCertificate: null
      enabled: false
      existingSecretFullChain: false
      failIfNoCert: false
      failIfNoPeerCert: false
      overrideCaCertificate: ""
      serverCertificate: null
      serverKey: null
      sslOptionsPassword:
        enabled: false
        existingSecret: ""
        key: ""
        password: ""
      sslOptionsVerify: verify_peer
    username: admin
  enabled: true
  extraConfiguration: management.listener.ssl = {{ .Values.global.rabbitmq.auth.tls.enabled
    }}
  extraEnvVars:
  - name: RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS
    value: +S 2:2 +sbwt none +sbwtdcpu none +sbwtdio none
  extraSecrets:
    load-definition:
      load_definition.json: |
        {
          "vhosts": [
            {
              "name": "xray"
            }
          ],
          "users": [
            {
              "name": "{{ .Values.auth.username }}",
              "password": "{{ .Values.auth.password }}",
              "tags": "administrator"
            }
          ],
          "permissions": [
          {
            "user": "admin",
            "vhost": "xray",
            "configure": ".*",
            "write": ".*",
            "read": ".*"
          }
          ],
          "policies": [
            {
              "name": "ha-all",
              "apply-to": "all",
              "pattern": ".*",
              "vhost": "xray",
              "definition": {
                "ha-mode": "all",
                "ha-sync-mode": "automatic"
              }
            }
          ]
        }
  extraSecretsPrependReleaseName: true
  featureFlags: drop_unroutable_metric,empty_basic_get_metric,implicit_default_bindings,maintenance_mode_status,quorum_queue,stream_queue,user_limits,virtual_host_metadata
  image:
    repository: bitnami/rabbitmq
    tag: 3.13.7-debian-12-r2
  loadDefinition:
    enabled: true
    existingSecret: '{{ .Release.Name }}-load-definition'
  maxAvailableSchedulers: null
  migration:
    enabled: true
    image:
      pullPolicy: IfNotPresent
      registry: '{{ .Values.global.imageRegistry }}'
      repository: bitnami/kubectl
      tag: 1.31.2
    resources:
      limits:
        cpu: 1
        memory: 1Gi
      requests:
        cpu: 5m
        memory: 10Mi
    serviceAccount:
      automountServiceAccountToken: true
      create: true
      name: null
      rbac:
        create: true
        role:
          rules:
          - apiGroups:
            - ""
            resources:
            - pods/exec
            - pods
            verbs:
            - create
            - get
            - list
  onlineSchedulers: null
  persistence:
    size: 30Gi
  rabbitmqUpgradeReady: false
  tolerations: []
worker:
  enabled: false
xray:
  analysis:
    resources:
      limits:
        memory: 4Gi
      requests:
        cpu: 30m
        memory: 250Mi
  common:
    extraEnvVars: |
      - name: "JF_SHARED_RABBITMQ_VHOST"
        value: "xray"
    persistence:
      size: 30Gi
    rabbitmq:
      connectionConfigFromEnvironment: false
  database:
    password: xray
    url: '{{ include "database.url" . }}'
    user: xray
  enabled: true
  indexer:
    resources:
      limits:
        memory: 4Gi
      requests:
        cpu: 40m
        memory: 250Mi
  observability:
    resources:
      limits:
        memory: 250Mi
      requests:
        cpu: 10m
        memory: 25Mi
  panoramic:
    enabled: false
    resources:
      limits:
        memory: 4Gi
      requests:
        cpu: 30m
        memory: 250Mi
  persist:
    resources:
      limits:
        memory: 4Gi
      requests:
        cpu: 30m
        memory: 250Mi
  postgresql:
    enabled: false
  rabbitmq:
    enabled: false
    external:
      erlangCookie: secretcookie
      password: password
      url: '{{ include "xray.rabbitmq.extRabbitmq.url" . }}'
      username: admin
  rbac:
    create: true
  router:
    resources:
      limits:
        memory: 1Gi
      requests:
        cpu: 20m
        memory: 50Mi
  sbom:
    enabled: false
    resources:
      limits:
        memory: 4Gi
      requests:
        cpu: 30m
        memory: 250Mi
  server:
    resources:
      limits:
        memory: 4Gi
      requests:
        cpu: 60m
        memory: 250Mi
  serviceAccount:
    create: true
  unifiedUpgradeAllowed: true
  xray:
    unifiedSecretInstallation: true
